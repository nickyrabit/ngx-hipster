name: Sample applications
on: [push]
jobs:
  api-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java-version: [11.x]
        app-type: ['reactive']
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Compile
        run: |
          cd $GITHUB_WORKSPACE/demo/ngx-hipster-sample-api
          ./mvnw -ntp clean compile
      - name: Unit tests
        run: |
          cd $GITHUB_WORKSPACE/demo/ngx-hipster-sample-api
          ./mvnw -ntp test
      - name: Build and publish docker image
        run: |
          cd $GITHUB_WORKSPACE/demo/ngx-hipster-sample-api
          ./mvnw -ntp jib:build -Djib.to.image=docker.pkg.github.com/vishal423/ngx-hipster/ngx-hipster-sample-api:latest -Djib.to.auth.username="${{ secrets.USERNAME }}" -Djib.to.auth.password="${{ secrets.REGISTRY_PASSWORD }}"
  app-build:
    needs: api-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node-version: [12.x]
        app-type: ['session', 'oidc']
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Angular CLI
        run: yarn global add @angular/cli
      - name: Install local packages
        run: yarn install
        env:
          CI: true
      - name: Download latest chrome binary
        run: |
          sudo apt update
          sudo apt install google-chrome-stable
      - run: sudo apt install xvfb
      - name: Build ngx-hipster library and include schematics
        run: |
          export PATH="$(yarn global bin):$PATH"
          echo $PATH
          ng build
          cd projects/ngx-hipster
          yarn build
          cd ../../dist/ngx-hipster
          yarn pack
      - name: Generate sample angular cli application and add ngx-hipster dependency with default application
        run: |
          cd $GITHUB_WORKSPACE/dist/ngx-hipster
          export NGX_PKG_VER=$(cat package.json | grep 'version' | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g'  | tr -d '[[:space:]]')
          echo $NGX_PKG_VER
          mkdir -p $HOME/test-app
          cd $HOME/test-app
          export PATH="$(yarn global bin):$PATH"
          ng new sample-app --interactive=false --prefix=hip --style=scss --routing=true --commit=false
          cd sample-app
          ng add $GITHUB_WORKSPACE/dist/ngx-hipster/ngx-hipster-v$NGX_PKG_VER.tgz --configureNgx=false
          ng g ngx-hipster:jest --configureJest=true
          ng g ngx-hipster:prettier
          ng g ngx-hipster:proxy-confirm --configureProxy=false
          if [[ ${{ matrix.app-type }} -eq "oidc" ]]; then ng g ngx-hipster:proxy --serverUrl=http://localhost:8080 --proxyPath=/api,/oauth2,/login/oauth2 ; else ng g ngx-hipster:proxy --serverUrl=http://localhost:8080 --proxyPath=/api ; fi
          ng g ngx-hipster:app-shell --authenticationType=${{ matrix.app-type }}
          ng g ngx-hipster:material-layout
      - name: Generate entity create, update and list layouts
        run: |
          export PATH="$(yarn global bin):$PATH"
          cd $HOME/test-app/sample-app
          echo '{ "name": "movie", "pageTitle": "Movies", "pageOptions": { "list": { "displayFields": [ "title", "director", "releaseDate" ] } }, "fields": [ { "label": "Title", "name": "title", "dataType": "string", "controlType": "text", "validation": { "required": true, "minlength": 2, "maxlength": 200 } }, { "label": "Plot", "name": "plot", "dataType": "string", "controlType": "textarea", "validation": { "minlength": 100, "maxlength": 1000 } }, { "label": "Rated", "name": "rated", "dataType": "string", "controlType": "radio", "validation": {}, "options": [ { "name": "PG", "label": "PG" }, { "name": "PG-13", "label": "PG - 13" } ] }, { "label": "Genres", "name": "genres", "dataType": "string", "controlType": "select", "validation": { "required": true }, "multiple": true, "options": [ { "name": "Adventure", "label": "Adventure" }, { "name": "Action", "label": "Action" }, { "name": "Fantasy", "label": "Fantasy" } ] }, { "label": "Director", "name": "director", "dataType": "string", "controlType": "select", "validation": { "required": true }, "options": [ { "name": "George Lucas", "label": "George Lucas" }, { "name": "Irvin Kershner", "label": "Irvin Kershner" }, { "name": "Richard Marquand", "label": "Richard Marquand" } ] }, { "label": "Writer", "name": "writer", "dataType": "string", "controlType": "autocomplete", "validation": { "required": true }, "options": [ { "name": "George Lucas", "label": "George Lucas" }, { "name": "Leigh Brackett", "label": "Leigh Brackett" }, { "name": "Lawrence Kasdan", "label": "Lawrence Kasdan" }, { "name": "Roberto Orci", "label": "Roberto Orci" }, { "name": "Gene Roddenberry", "label": "Gene Roddenberry" }, { "name": "Rick Berman", "label": "Rick Berman" }, { "name": "Brannon Braga", "label": "Brannon Braga" }, { "name": "Ronald D. Moore", "label": "Ronald D. Moore" }, { "name": "Harve Bennett", "label": "Harve Bennett" }, { "name": "Jack B. Sowards", "label": "Jack B. Sowards" }, { "name": "Jonathan Hales", "label": "Jonathan Hales" }, { "name": "Alex Kurtzman", "label": "Alex Kurtzman" } ] }, { "label": "Release Date", "name": "releaseDate", "dataType": "date", "controlType": "date", "format": "MM/yyyy", "validation": { "required": true } } ] }' > movie.json
          ng g ngx-hipster:entity --entityJson=movie.json
      - name: Execute unit tests of generated application
        run: |
          cd $HOME/test-app/sample-app
          export PATH="$(yarn global bin):$PATH"
          yarn test
        env:
          CI: true
      - name: Lint generated application code
        run: |
          cd $HOME/test-app/sample-app
          export PATH="$(yarn global bin):$PATH"
          ng lint
        env:
          CI: true
      - name: Run e2e tests
        run: |
          docker login docker.pkg.github.com --username ${{ secrets.USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }}
          docker run -d -p 8080:8080 docker.pkg.github.com/vishal423/ngx-hipster/ngx-hipster-sample-api
          timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/api/authenticate)" != "200" ]]; do sleep 5; done' || false
          cd $HOME/test-app/sample-app
          export PATH="$(yarn global bin):$PATH"
          xvfb-run --auto-servernum ng e2e
        env:
          CI: true
      - name: Create AOT build of generated application
        run: |
          cd $HOME/test-app/sample-app
          export PATH="$(yarn global bin):$PATH"
          ng build --aot
        env:
          CI: true
