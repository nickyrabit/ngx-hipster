import { Injectable } from '@angular/core';
<% if(authenticationType === 'oidc') { %>import { Location } from '@angular/common';<% } %>
import { HttpClient<% if(authenticationType === 'session') { %>, HttpHeaders <% } %> } from '@angular/common/http';
import { Observable, of, ReplaySubject<% if(authenticationType === 'session') { %>, throwError, timer <% } %> } from 'rxjs';
import {
  catchError,<% if(authenticationType === 'session') { %>
  mergeMap,
  retryWhen,
  switchMap,<% } %>
  tap,
  flatMap
} from 'rxjs/operators';
import { User } from './user';

@Injectable({
  providedIn: 'root'
})
export class AuthenticationService {
  private principalCache$: ReplaySubject<User> = new ReplaySubject(1);

  constructor(<% if(authenticationType === 'oidc') { %>private location: Location, <% } %>private http: HttpClient) {}

  <% if(authenticationType === 'oidc') { %>
  login(): void {
    location.href = `${location.origin}${this.location.prepareExternalUrl(
      'oauth2/authorization/oidc'
    )}`;
  }
  <% } else if (authenticationType === 'session') { %>

  login(username: string, password: string): Observable<User | undefined> {
    const loginRequest = `username=${encodeURIComponent(
			username
    )}&password=${encodeURIComponent(password)}`;
    const headers = new HttpHeaders().set(
      'Content-Type',
      'application/x-www-form-urlencoded'
    );
    return this.http.post('api/authentication', loginRequest, { headers }).pipe(
      retryWhen(this.retryOnceOnCsrfFailure()),
      switchMap(() => this.fetchUserInfo())
    );
  }

  retryOnceOnCsrfFailure = () => (attempts: Observable<any>) => {
    return attempts.pipe(
      mergeMap((error, i) => {
        const attempt = i + 1;
        if (attempt > 1 || error.status !== 403) {
          return throwError(error);
        }
        return timer(1);
      })
    );
  };
  <% } %>

  logout(): Observable<any> {
    return this.http.post('api/logout', {}).pipe(
      <% if(authenticationType === 'oidc') { %>
      tap(({ idToken, logoutUrl }: { idToken: string; logoutUrl: string }) => {
        this.principalCache$.next(undefined);
        const redirectUri = `${
          location.origin
        }${this.location.prepareExternalUrl('/')}`;
        location.href = logoutUrl.includes('/protocol')
          ? logoutUrl + '?redirect_uri=' + redirectUri
          : `${logoutUrl}?id_token_hint=${idToken}&post_logout_redirect_uri=${redirectUri}`;
      })
      <% } else if (authenticationType === 'session') { %>
      tap(() => {
        this.principalCache$.next(undefined);
      })
      <% } %>
    );
  }

  get user$(): Observable<User> {
    return this.principalCache$.asObservable();
  }

  fetchUserInfoWhenAuthenticated(): Observable<User | undefined> {
    return this.http.get<string>('api/authenticate').pipe(
      flatMap(username => username ? this.fetchUserInfo() : this.handleUnauthenticatedUser()),
      catchError(() => this.handleUnauthenticatedUser())
    );
  }

  private handleUnauthenticatedUser(): Observable<undefined> {
    this.principalCache$.next(undefined);
    return of(undefined);
  }

  private fetchUserInfo(): Observable<User | undefined> {
    return this.http.get<User>('api/account').pipe(
      tap(user => this.principalCache$.next(user)),
      catchError(() => this.handleUnauthenticatedUser())
    );
  }
}
