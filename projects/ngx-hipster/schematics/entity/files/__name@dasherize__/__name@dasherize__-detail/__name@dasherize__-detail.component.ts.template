<% const visibleFields = entity.fields.filter(field => entity.pageOptions.edit.hideFields.includes(field.name) === false); %>
import { Component, OnInit } from '@angular/core';<%
const fieldContainOptions = entity.fields
    .filter(field => entity.pageOptions.edit.hideFields.includes(field.name) === false)
    .filter(field => field.options)
if(fieldContainOptions) { %>import { KeyValue } from '@angular/common';<% } %>
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
<% const containsAutocomplete = visibleFields.find(field => field.controlType === 'autocomplete');
if( containsAutocomplete) {
%>import { startWith, map } from 'rxjs/operators';<%
} %>

import { <%= classify(name) %>Service } from '../<%= dasherize(name) %>.service';
import { <%= classify(name) %>FormService } from './<%= dasherize(name) %>-form.service';
import { <%= classify(name) %> } from '../<%= dasherize(name) %>';

@Component({
  selector: '<%= prefix %>-<%= dasherize(name) %>-detail',
  templateUrl: './<%= dasherize(name) %>-detail.component.html',
  styleUrls: ['./<%= dasherize(name) %>-detail.component.scss']
})
export class <%= classify(name) %>DetailComponent implements OnInit {

  <%= camelize(name) %>: <%= classify(name) %>;
  form: FormGroup;
  isSaveOrUpdateInProgress = false; <%
  for (let field of visibleFields) {
    if(field.options) {
  %>
  <%= camelize(field.name + 'Options') %>: KeyValue<string, string>[] = <%= JSON.stringify(field.options.map(fieldOption => ({ "key": fieldOption.name, "value": fieldOption.label }))) %>; <%
    }
    if(field.controlType === 'autocomplete') {
  %>
  <%= camelize('filtered' + classify(field.name) + 'Options') %>: Observable<KeyValue<string, string>[]>;<%
    }
  } %>
  error: string | undefined = undefined;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private formService: <%= classify(name) %>FormService,
    private <%= camelize(name) %>Service: <%= classify(name) %>Service
  ) {}

  ngOnInit() {
    this.route.data.subscribe(({ <%= camelize(name) %> }) => {
      this.<%= camelize(name) %> = <%= camelize(name) %>;
      this.form = this.formService.toFormGroup(<%= camelize(name) %>);
    });
    <%
    for (let field of visibleFields) {
      if(field.controlType === 'autocomplete') {
    %>
    this.<%= camelize('filtered' + classify(field.name) + 'Options') %> = this.form.get('<%= field.name %>')!.valueChanges.pipe(
      startWith(null),
      map((<%= field.name %>: string | null) => <%= field.name %> ? this.<%= camelize('filter' + classify(field.name) + 'Options') %>(<%= field.name %>) : this.<%= camelize(field.name + 'Options') %>)
    );<%
    }
  } %>
    this.error = undefined;
  }

  saveOrUpdate() {
    this.isSaveOrUpdateInProgress = true;
    this.error = undefined;
    if (this.form.value.<%= primaryKey %>) {
      this.subscribeToResponse(
        this.<%= camelize(name) %>Service.update(
          this.formService.fromFormGroup(this.form)
        )
      );
    } else {
      this.subscribeToResponse(
        this.<%= camelize(name) %>Service.create(
          this.formService.fromFormGroup(this.form)
        )
      );
    }
  }

  private subscribeToResponse(result: Observable<<%= classify(name) %>>) {
    result.subscribe({
      next: () => this.router.navigate(['/<%= pluralize(dasherize(name)) %>']),
      error: response => {
        this.isSaveOrUpdateInProgress = false;
        this.error = response.error
          ? response.error.detail ||
            response.error.title ||
            'Internal Server Error'
          : 'Internal Server Error';
      },
      complete: () => (this.isSaveOrUpdateInProgress = false)
    });
  }
  <%
  for (let field of visibleFields) {
    if(field.controlType === 'autocomplete') {
  %>
  private <%= camelize('filter' + classify(field.name) + 'Options') %>(<%= field.name %>: string): KeyValue<string, string>[] {
    return this.<%= camelize(field.name + 'Options') %>
      .filter(<%= camelize(field.name + 'Option') %> => <%= camelize(field.name + 'Option') %>.value.toLowerCase().indexOf(<%= field.name %>.toLowerCase()) !== -1);
  }<%
    }
  } %>

  cancel() {
    this.router.navigate(['/<%= pluralize(dasherize(name)) %>']);
    return false;
  }
}
