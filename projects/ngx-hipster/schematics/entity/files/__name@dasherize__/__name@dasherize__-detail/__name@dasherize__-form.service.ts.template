import { Injectable } from '@angular/core';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';

import { <%= classify(name) %> } from '../<%= dasherize(name) %>';

@Injectable({
  providedIn: 'root'
})
export class <%= classify(name) %>FormService {
  constructor(private formBuilder: FormBuilder) {}

  toFormGroup(
    <%= camelize(name) %>: Partial<<%= classify(name) %>> = {}
  ) {
    return this.formBuilder.group({
      <% for (let fieldIndex = 0; fieldIndex < entity.fields.length; fieldIndex++) {
          const field = entity.fields[fieldIndex];
      %><%= field.name %>: this.formBuilder.control(<%= camelize(name) %>.<%= field.name %>, [
        <% let addSeparator = false; %>
        <% if (field.validation.required) { %>Validators.required<% addSeparator = true; } %>
        <% if (field.validation.minlength) { %><%= addSeparator ? ', ' : '' %>Validators.minLength(<%= field.validation.minlength %>)<% addSeparator = true; } %>
        <% if (field.validation.maxlength) { %><%= addSeparator ? ', ' : '' %>Validators.maxLength(<%= field.validation.maxlength %>)<% addSeparator = true; } %>
      ])<%= (fieldIndex === (entity.fields.length - 1)) ? '' : ',' %><% } %>
    });
  }

  fromFormGroup(formGroup: FormGroup) {
    return {
      <%
      for (let fieldIndex = 0; fieldIndex < entity.fields.length; fieldIndex++) {
          const field = entity.fields[fieldIndex];
      %><%= field.name %>: formGroup.get('<%= field.name %>').value<%= (fieldIndex === (entity.fields.length - 1)) ? '' : ',' %>
      <% } %>
    };
  }
}
