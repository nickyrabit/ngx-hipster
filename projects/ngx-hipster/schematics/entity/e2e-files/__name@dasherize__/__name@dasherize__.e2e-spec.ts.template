import { browser, logging } from 'protractor';

import { HeaderPage } from '../header.po';
import { LoginPage } from '../login/login.po';
import { <%= classify(name) %>ListPage } from './<%= dasherize(name) %>-list.po';
import { SidenavPage } from '../sidenav.po';
import { <%= classify(name) %>DetailPage } from './<%= dasherize(name) %>-detail.po';

describe('<%= classify(name) %> tests', () => {
  let headerPage: HeaderPage;
  let loginPage: LoginPage;
  let sidenavPage: SidenavPage;
  let listPage: <%= classify(name) %>ListPage;
  let detailPage: <%= classify(name) %>DetailPage;
  let initialCount: number;

  beforeAll(async () => {
    headerPage = new HeaderPage();
    loginPage = new LoginPage();
    sidenavPage = new SidenavPage();

    await headerPage.navigateTo();
    expect(await headerPage.loginMenu.isDisplayed()).toBeTruthy();

    await headerPage.loginMenu.click();

    expect(await loginPage.getPageTitleText()).toEqual('Sign In');
    expect(await loginPage.loginBtn.isEnabled()).toBeFalsy();

    await loginPage.username.sendKeys('admin');
    await loginPage.password.sendKeys('admin');

    expect(await loginPage.loginBtn.isEnabled()).toBeTruthy();

    await loginPage.loginBtn.click();

    expect(await headerPage.loginMenu.isPresent()).toBeFalsy();
    expect(await headerPage.appMenu.isDisplayed()).toBeTruthy();
    expect(await headerPage.accountMenu.isDisplayed()).toBeTruthy();
  });

  afterAll(async () => {
    expect(await headerPage.accountMenu.isDisplayed()).toBeTruthy();

    await headerPage.accountMenu.click();
    await headerPage.logoutMenu.click();

    expect(await headerPage.loginMenu.isDisplayed()).toBeTruthy();
    expect(await headerPage.appMenu.isPresent()).toBeFalsy();
    expect(await headerPage.accountMenu.isPresent()).toBeFalsy();
  });

  beforeEach(() => {
    headerPage = new HeaderPage();
    sidenavPage = new SidenavPage();
    listPage = new <%= classify(name) %>ListPage();
    detailPage = new <%= classify(name) %>DetailPage();
  });

  beforeEach(async () => {
    await headerPage.appMenu.click();
    await sidenavPage.<%= camelize(name) %>Menu.click();
  });

  afterEach(async () => {
    const logs = await browser
      .manage()
      .logs()
      .get(logging.Type.BROWSER);
    expect(logs).not.toContain(
      jasmine.objectContaining({
        level: logging.Level.SEVERE
      } as logging.Entry)
    );
  });

  it('should display the <%= pluralize(dasherize(name)) %> list page', async () => {
    expect(await listPage.getPageTitleText()).toEqual('<%= pluralize(classify(name)) %>');

    expect(await listPage.createBtn.isEnabled()).toBeTruthy();

    expect(await listPage.table.noRecords.isDisplayed()).toBeTruthy();
    expect(await listPage.table.noRecords.getText()).toEqual('No records found');
    initialCount = 0;
  });

  it('should create a new <%= dasherize(name) %>', async () => {
    await listPage.createBtn.click();

    expect(await detailPage.pageTitle.getText()).toEqual('<%= classify(name) %>');
    expect(await detailPage.pageSubTitle.getText()).toEqual('Creates a new <%= name %>.');
    expect(await detailPage.cancelBtn.isEnabled()).toBeTruthy();
    expect(await detailPage.saveBtn.isEnabled()).toBeFalsy();

<%
  const visibleFields = entity.fields.filter(field =>
    entity.pageOptions.edit.hideFields.includes(field.name) === false);
  for (let field of visibleFields) {
    if(field.controlType === 'text') {
%>
    expect(await detailPage.<%= field.name %>Label.getText()).toEqual('<%= field.label %>');
    await detailPage.<%= field.name %>.sendKeys('Lorem Ipsum');
<%
    } else if(field.controlType === 'textarea') {
%>
    expect(await detailPage.<%= field.name %>Label.getText()).toEqual('<%= field.label %>');
    await detailPage.<%= field.name %>.sendKeys(
      'Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum'
    );
<%
    } else if(field.controlType === 'radio') {
%>
    await detailPage.<%= field.name %>.first().click();
<%
    } else if(field.controlType === 'select') {
%>
    expect(await detailPage.<%= field.name %>Label.getText()).toEqual('<%= field.label %>');
    await detailPage.<%= field.name %>.click();

    <% if(field.multiple) { %>
    await detailPage.<%= field.name %>Options.first().click();
    await detailPage.overlay.click();
    <% } else { %>
    await detailPage.directorOptions.last().click();
    <% } %>
<%
    } else if(field.controlType === 'autocomplete') {
%>
    expect(await detailPage.<%= field.name %>Label.getText()).toEqual('<%= field.label %>');
    await detailPage.<%= field.name %>.sendKeys('ge');
    await detailPage.<%= field.name %>Autocomplete.first().click();
<%
    } else if(field.controlType === 'date') {
%>
    expect(await detailPage.<%= field.name %>Label.getText()).toEqual('<%= field.label %>');
    await detailPage.<%= field.name %>.sendKeys('3/12/1965');
    await detailPage.<%= field.name %>Picker.click();
    await detailPage.overlay.click();
<%
    }
  }
%>
    expect(await detailPage.saveBtn.isEnabled()).toBeTruthy();
    await detailPage.saveBtn.click();

    expect(await listPage.table.columns.count()).toEqual(<%= entity.pageOptions.list.displayFields.length + 1 %>);

    const actualRecordsCount = await listPage.table.records.count();
    expect(actualRecordsCount).toEqual(initialCount + 1);

    const actionsMenu = listPage.table.getActionsBtn(actualRecordsCount - 1);

    await actionsMenu.click();
    expect(await listPage.editBtn.isEnabled()).toBeTruthy();
    expect(await listPage.deleteBtn.isEnabled()).toBeTruthy();
    await listPage.overlay.click();
  });
});
